{
  "address": "0xF4A7Fe26eb9c8f40975c0D0A159549B9F3915453",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFail",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rafflestate",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "s_player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReceneWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getlastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7690ab8393cee6b83aab738520cc50bcc8e24984317b877e5cfb91005552e45",
  "receipt": {
    "to": null,
    "from": "0xA20D021cC2E8747Ebc2585828C90EC59a2c7e469",
    "contractAddress": "0xF4A7Fe26eb9c8f40975c0D0A159549B9F3915453",
    "transactionIndex": 18,
    "gasUsed": "1171053",
    "logsBloom": "0x
    "blockHash": "0x11c0f76328d9d430bc507eccc797ed697d26e7f4cca71272d5876fdd4116700b",
    "transactionHash": "0xe7690ab8393cee6b83aab738520cc50bcc8e24984317b877e5cfb91005552e45",
    "logs": [],
    "blockNumber": 4029423,
    "cumulativeGasUsed": "17855232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "4197",
    "500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "7765a0968b00268d9f49745070644fec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFail\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rafflestate\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"s_player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceneWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle_NotEnoughETHEntered();\\nerror Raffle_TransferFail();\\nerror Raffle_NotOpen();\\nerror Raffle_UpkeepNotNeeded(uint256 currentBalance , uint256 numPlayers , uint256 rafflestate);\\n\\ncontract Raffle is VRFConsumerBaseV2,KeeperCompatibleInterface{\\n    /*Type*/\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /*State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_player;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_COFIRMATIONS=3;\\n    uint32 private constant NUM_WORDS=1;\\n\\n    //Lottery variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_Interval;\\n\\n    /*Events*/\\n    event RaffleEnter(address indexed s_player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2, //contract address\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n        ) VRFConsumerBaseV2(vrfCoordinatorV2){\\n        i_entranceFee=entranceFee;\\n        i_vrfCoordinator=VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane=gasLane;\\n        i_subscriptionId=subscriptionId;\\n        i_callbackGasLimit=callbackGasLimit;\\n        s_raffleState=RaffleState.OPEN;\\n        s_lastTimeStamp=block.timestamp;\\n        i_Interval=interval;\\n    }\\n\\n    function enterRaffle()public payable{\\n        if(msg.value<i_entranceFee){revert Raffle_NotEnoughETHEntered();}\\n        if(s_raffleState!=RaffleState.OPEN){revert Raffle_NotOpen();}\\n        s_player.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /* This is the function that Chainlin  Keeper nodes \\n     *call they look for the 'upKeepNeeded to return true.\\n     *The following should be true in order to return true:\\n     *1.Our time interval should have passed\\n     *2.The lottery should have at least 1 player, and have some ETH\\n     *3.Our subscribtion is funded with Link\\n     *4.The lottery is in 'open' state\\n     */\\n    \\n    function checkUpkeep( bytes memory /*checkData*/)public view override \\n    returns(bool upkeepNeeded,bytes memory){\\n            bool isOpen=(RaffleState.OPEN==s_raffleState);\\n            bool timePassed=((block.timestamp-s_lastTimeStamp)>i_Interval);\\n            bool hasPlayers = (s_player.length>0);\\n            bool hasBalance = (address(this).balance>0);\\n            upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayers);\\n    }\\n\\n\\n    function performUpkeep(bytes calldata)external override{\\n        (bool upkeepNeeded,) = checkUpkeep(\\\"\\\");\\n        if(!upkeepNeeded){\\n            revert Raffle_UpkeepNotNeeded(\\n                address(this).balance,\\n                s_player.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        //request the random number\\n        //Once get it ,do someting \\n        s_raffleState=RaffleState.CALCULATING;\\n        uint256 requestId=i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_COFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/,uint256 [] memory randomwords) internal override{\\n        uint256 indexOfWinner = randomwords[0] % s_player.length;\\n        address payable recentWinner = s_player[indexOfWinner];\\n        s_recentWinner=recentWinner;\\n        s_raffleState=RaffleState.OPEN;\\n        s_player = new address payable[](0);\\n        s_lastTimeStamp=block.timestamp;\\n        (bool success,)=recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if(!success){\\n            revert Raffle_TransferFail();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* View | pure */\\n    function getEntranceFee()public view returns(uint256){\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns(address){\\n        return s_player[index];\\n    }\\n    function getReceneWinner() public view returns(address){\\n        return s_recentWinner;\\n    }\\n    function getInterval() public view returns(uint256){\\n        return i_Interval;\\n    }\\n\\n    function getRaffleState() public view returns(RaffleState){\\n        return s_raffleState;\\n    }\\n    function getlastTimeStamp() public view returns(uint256){\\n        return s_lastTimeStamp;\\n    }\\n    function getNumberOfPlayers() public view returns(uint256){\\n        return s_player.length;\\n    }\\n    // function pickwinner(){\\n\\n    // }\\n}\",\"keccak256\":\"0xc8b4af68cd871320e18abd8a034ad42dfef5c21dbb9b7ee3bc246d2ade3c56b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200176a3803806200176a833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161139b620003cf6000396000818161071b01526107b30152600061061f015260006105fc015260006105db0152600061059f01526000818161027e015261037b0152600081816102bb015261030f015261139b6000f3fe60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d1461015357806372da68ab1461019157806391ad27b4146101bc578063aa581776146101e7578063e55ae4e814610212578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b25565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610bb7565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610d6b565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610e22565b6104e8565b005b34801561015f57600080fd5b5061017a60048036038101906101759190610f24565b6106d8565b604051610188929190611007565b60405180910390f35b34801561019d57600080fd5b506101a6610785565b6040516101b39190611078565b60405180910390f35b3480156101c857600080fd5b506101d16107af565b6040516101de9190610b25565b60405180910390f35b3480156101f357600080fd5b506101fc6107d7565b6040516102099190610b25565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190611093565b6107e1565b6040516102469190611078565b60405180910390f35b34801561025b57600080fd5b50610264610828565b6040516102719190610b25565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103629291906110c0565b60405180910390fd5b6103758282610834565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103e7576103e6610b40565b5b600160149054906101000a900460ff16600181111561040957610408610b40565b5b14610440576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610502604051806020016040528060008152506106d8565b509050806105715747600080549050600160149054906101000a900460ff16600181111561053357610532610b40565b5b6040517fe059521b000000000000000000000000000000000000000000000000000000008152600401610568939291906110e9565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561059657610595610b40565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610660959493929190611198565b6020604051808303816000875af115801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190611200565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060606000600160149054906101000a900460ff166001811115610700576106ff610b40565b5b6000600181111561071457610713610b40565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610748919061125c565b119050600080600080549050119050600080471190508380156107685750825b80156107715750805b801561077a5750815b955050505050915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106107f6576107f5611290565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061084f5761084e611290565b5b602002602001015161086191906112ee565b9050600080828154811061087857610877611290565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561090c5761090b610b40565b5b0217905550600067ffffffffffffffff81111561092c5761092b610c28565b5b60405190808252806020026020018201604052801561095a5781602001602082028036833780820191505090505b5060009080519060200190610970929190610a65565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161099e90611350565b60006040518083038185875af1925050503d80600081146109db576040519150601f19603f3d011682016040523d82523d6000602084013e6109e0565b606091505b5050905080610a1b576040517f4d3c562d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ade579160200282015b82811115610add5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a85565b5b509050610aeb9190610aef565b5090565b5b80821115610b08576000816000905550600101610af0565b5090565b6000819050919050565b610b1f81610b0c565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b8057610b7f610b40565b5b50565b6000819050610b9182610b6f565b919050565b6000610ba182610b83565b9050919050565b610bb181610b96565b82525050565b6000602082019050610bcc6000830184610ba8565b92915050565b6000604051905090565b600080fd5b600080fd5b610bef81610b0c565b8114610bfa57600080fd5b50565b600081359050610c0c81610be6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6082610c17565b810181811067ffffffffffffffff82111715610c7f57610c7e610c28565b5b80604052505050565b6000610c92610bd2565b9050610c9e8282610c57565b919050565b600067ffffffffffffffff821115610cbe57610cbd610c28565b5b602082029050602081019050919050565b600080fd5b6000610ce7610ce284610ca3565b610c88565b90508083825260208201905060208402830185811115610d0a57610d09610ccf565b5b835b81811015610d335780610d1f8882610bfd565b845260208401935050602081019050610d0c565b5050509392505050565b600082601f830112610d5257610d51610c12565b5b8135610d62848260208601610cd4565b91505092915050565b60008060408385031215610d8257610d81610bdc565b5b6000610d9085828601610bfd565b925050602083013567ffffffffffffffff811115610db157610db0610be1565b5b610dbd85828601610d3d565b9150509250929050565b600080fd5b60008083601f840112610de257610de1610c12565b5b8235905067ffffffffffffffff811115610dff57610dfe610dc7565b5b602083019150836001820283011115610e1b57610e1a610ccf565b5b9250929050565b60008060208385031215610e3957610e38610bdc565b5b600083013567ffffffffffffffff811115610e5757610e56610be1565b5b610e6385828601610dcc565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610e8f57610e8e610c28565b5b610e9882610c17565b9050602081019050919050565b82818337600083830152505050565b6000610ec7610ec284610e74565b610c88565b905082815260208101848484011115610ee357610ee2610e6f565b5b610eee848285610ea5565b509392505050565b600082601f830112610f0b57610f0a610c12565b5b8135610f1b848260208601610eb4565b91505092915050565b600060208284031215610f3a57610f39610bdc565b5b600082013567ffffffffffffffff811115610f5857610f57610be1565b5b610f6484828501610ef6565b91505092915050565b60008115159050919050565b610f8281610f6d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fc2578082015181840152602081019050610fa7565b60008484015250505050565b6000610fd982610f88565b610fe38185610f93565b9350610ff3818560208601610fa4565b610ffc81610c17565b840191505092915050565b600060408201905061101c6000830185610f79565b818103602083015261102e8184610fce565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106282611037565b9050919050565b61107281611057565b82525050565b600060208201905061108d6000830184611069565b92915050565b6000602082840312156110a9576110a8610bdc565b5b60006110b784828501610bfd565b91505092915050565b60006040820190506110d56000830185611069565b6110e26020830184611069565b9392505050565b60006060820190506110fe6000830186610b16565b61110b6020830185610b16565b6111186040830184610b16565b949350505050565b6000819050919050565b61113381611120565b82525050565b600067ffffffffffffffff82169050919050565b61115681611139565b82525050565b600061ffff82169050919050565b6111738161115c565b82525050565b600063ffffffff82169050919050565b61119281611179565b82525050565b600060a0820190506111ad600083018861112a565b6111ba602083018761114d565b6111c7604083018661116a565b6111d46060830185611189565b6111e16080830184611189565b9695505050505050565b6000815190506111fa81610be6565b92915050565b60006020828403121561121657611215610bdc565b5b6000611224848285016111eb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126782610b0c565b915061127283610b0c565b925082820390508181111561128a5761128961122d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112f982610b0c565b915061130483610b0c565b925082611314576113136112bf565b5b828206905092915050565b600081905092915050565b50565b600061133a60008361131f565b91506113458261132a565b600082019050919050565b600061135b8261132d565b915081905091905056fea264697066735822122074e6ac3fe8abf1c2344bd5a75ec4844c345e580218b78daee3c8687b0c15397d64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d1461015357806372da68ab1461019157806391ad27b4146101bc578063aa581776146101e7578063e55ae4e814610212578063fd6673f51461024f5761009c565b806309bc33a7146100a1578063115cbaf5146100cc5780631fe543e3146100f75780632cfcc539146101205780634585e33b1461012a575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b25565b60405180910390f35b3480156100d857600080fd5b506100e16102a2565b6040516100ee9190610bb7565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610d6b565b6102b9565b005b610128610379565b005b34801561013657600080fd5b50610151600480360381019061014c9190610e22565b6104e8565b005b34801561015f57600080fd5b5061017a60048036038101906101759190610f24565b6106d8565b604051610188929190611007565b60405180910390f35b34801561019d57600080fd5b506101a6610785565b6040516101b39190611078565b60405180910390f35b3480156101c857600080fd5b506101d16107af565b6040516101de9190610b25565b60405180910390f35b3480156101f357600080fd5b506101fc6107d7565b6040516102099190610b25565b60405180910390f35b34801561021e57600080fd5b5061023960048036038101906102349190611093565b6107e1565b6040516102469190611078565b60405180910390f35b34801561025b57600080fd5b50610264610828565b6040516102719190610b25565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036b57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103629291906110c0565b60405180910390fd5b6103758282610834565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156103d3576040517f74938f2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156103e7576103e6610b40565b5b600160149054906101000a900460ff16600181111561040957610408610b40565b5b14610440576040517fd6e19a8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000610502604051806020016040528060008152506106d8565b509050806105715747600080549050600160149054906101000a900460ff16600181111561053357610532610b40565b5b6040517fe059521b000000000000000000000000000000000000000000000000000000008152600401610568939291906110e9565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561059657610595610b40565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610660959493929190611198565b6020604051808303816000875af115801561067f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a39190611200565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060606000600160149054906101000a900460ff166001811115610700576106ff610b40565b5b6000600181111561071457610713610b40565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610748919061125c565b119050600080600080549050119050600080471190508380156107685750825b80156107715750805b801561077a5750815b955050505050915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106107f6576107f5611290565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061084f5761084e611290565b5b602002602001015161086191906112ee565b9050600080828154811061087857610877611290565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561090c5761090b610b40565b5b0217905550600067ffffffffffffffff81111561092c5761092b610c28565b5b60405190808252806020026020018201604052801561095a5781602001602082028036833780820191505090505b5060009080519060200190610970929190610a65565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff164760405161099e90611350565b60006040518083038185875af1925050503d80600081146109db576040519150601f19603f3d011682016040523d82523d6000602084013e6109e0565b606091505b5050905080610a1b576040517f4d3c562d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ade579160200282015b82811115610add5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a85565b5b509050610aeb9190610aef565b5090565b5b80821115610b08576000816000905550600101610af0565b5090565b6000819050919050565b610b1f81610b0c565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610b8057610b7f610b40565b5b50565b6000819050610b9182610b6f565b919050565b6000610ba182610b83565b9050919050565b610bb181610b96565b82525050565b6000602082019050610bcc6000830184610ba8565b92915050565b6000604051905090565b600080fd5b600080fd5b610bef81610b0c565b8114610bfa57600080fd5b50565b600081359050610c0c81610be6565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6082610c17565b810181811067ffffffffffffffff82111715610c7f57610c7e610c28565b5b80604052505050565b6000610c92610bd2565b9050610c9e8282610c57565b919050565b600067ffffffffffffffff821115610cbe57610cbd610c28565b5b602082029050602081019050919050565b600080fd5b6000610ce7610ce284610ca3565b610c88565b90508083825260208201905060208402830185811115610d0a57610d09610ccf565b5b835b81811015610d335780610d1f8882610bfd565b845260208401935050602081019050610d0c565b5050509392505050565b600082601f830112610d5257610d51610c12565b5b8135610d62848260208601610cd4565b91505092915050565b60008060408385031215610d8257610d81610bdc565b5b6000610d9085828601610bfd565b925050602083013567ffffffffffffffff811115610db157610db0610be1565b5b610dbd85828601610d3d565b9150509250929050565b600080fd5b60008083601f840112610de257610de1610c12565b5b8235905067ffffffffffffffff811115610dff57610dfe610dc7565b5b602083019150836001820283011115610e1b57610e1a610ccf565b5b9250929050565b60008060208385031215610e3957610e38610bdc565b5b600083013567ffffffffffffffff811115610e5757610e56610be1565b5b610e6385828601610dcc565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115610e8f57610e8e610c28565b5b610e9882610c17565b9050602081019050919050565b82818337600083830152505050565b6000610ec7610ec284610e74565b610c88565b905082815260208101848484011115610ee357610ee2610e6f565b5b610eee848285610ea5565b509392505050565b600082601f830112610f0b57610f0a610c12565b5b8135610f1b848260208601610eb4565b91505092915050565b600060208284031215610f3a57610f39610bdc565b5b600082013567ffffffffffffffff811115610f5857610f57610be1565b5b610f6484828501610ef6565b91505092915050565b60008115159050919050565b610f8281610f6d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fc2578082015181840152602081019050610fa7565b60008484015250505050565b6000610fd982610f88565b610fe38185610f93565b9350610ff3818560208601610fa4565b610ffc81610c17565b840191505092915050565b600060408201905061101c6000830185610f79565b818103602083015261102e8184610fce565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061106282611037565b9050919050565b61107281611057565b82525050565b600060208201905061108d6000830184611069565b92915050565b6000602082840312156110a9576110a8610bdc565b5b60006110b784828501610bfd565b91505092915050565b60006040820190506110d56000830185611069565b6110e26020830184611069565b9392505050565b60006060820190506110fe6000830186610b16565b61110b6020830185610b16565b6111186040830184610b16565b949350505050565b6000819050919050565b61113381611120565b82525050565b600067ffffffffffffffff82169050919050565b61115681611139565b82525050565b600061ffff82169050919050565b6111738161115c565b82525050565b600063ffffffff82169050919050565b61119281611179565b82525050565b600060a0820190506111ad600083018861112a565b6111ba602083018761114d565b6111c7604083018661116a565b6111d46060830185611189565b6111e16080830184611189565b9695505050505050565b6000815190506111fa81610be6565b92915050565b60006020828403121561121657611215610bdc565b5b6000611224848285016111eb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061126782610b0c565b915061127283610b0c565b925082820390508181111561128a5761128961122d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112f982610b0c565b915061130483610b0c565b925082611314576113136112bf565b5b828206905092915050565b600081905092915050565b50565b600061133a60008361131f565b91506113458261132a565b600082019050919050565b600061135b8261132d565b915081905091905056fea264697066735822122074e6ac3fe8abf1c2344bd5a75ec4844c345e580218b78daee3c8687b0c15397d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 406,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_player",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 423,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 426,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)401"
      },
      {
        "astId": 428,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)401": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}